{"version":3,"sources":["Job.js","Jobs.js","App.js","serviceWorker.js","index.js"],"names":["Job","job","className","title","company","Jobs","jobs","map","mockJob","jobId","handleClick","event","preventDefault","console","info","App","Breadcrumbs","aria-label","Link","color","href","onClick","Typography","noValidate","autoComplete","TextField","id","label","variant","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.82a4ab78.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Job({ job }) {\r\n  return (\r\n    <div className={\"job\"}>\r\n      <span>{job.title}</span>\r\n      <span>{job.company}</span>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Job from \"./Job\";\r\nexport default function Jobs({ jobs }) {\r\n  return (\r\n    <div className={\"jobs\"}>\r\n      {jobs.map((job) => (\r\n        <Job job={job} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\nimport Link from \"@material-ui/core/Link\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport Jobs from \"./Jobs\";\nconst mockJob = [\n  { jobId: 1, title: \"SWE\", company: \"google\" },\n  { jobId: 2, title: \"SWE\", company: \"facebook\" },\n  { jobId: 3, title: \"SWE\", company: \"apple\" },\n  { jobId: 1, title: \"SWE\", company: \"google\" },\n  { jobId: 2, title: \"SWE\", company: \"facebook\" },\n  { jobId: 3, title: \"SWE\", company: \"apple\" },\n  { jobId: 1, title: \"SWE\", company: \"google\" },\n  { jobId: 2, title: \"SWE\", company: \"facebook\" },\n  { jobId: 3, title: \"SWE\", company: \"apple\" },\n  { jobId: 1, title: \"SWE\", company: \"google\" },\n  { jobId: 2, title: \"SWE\", company: \"facebook\" },\n  { jobId: 3, title: \"SWE\", company: \"apple\" },\n  { jobId: 1, title: \"SWE\", company: \"google\" },\n  { jobId: 2, title: \"SWE\", company: \"facebook\" },\n  { jobId: 3, title: \"SWE\", company: \"apple\" },\n  { jobId: 1, title: \"SWE\", company: \"google\" },\n  { jobId: 2, title: \"SWE\", company: \"facebook\" },\n  { jobId: 3, title: \"SWE\", company: \"apple\" },\n  { jobId: 1, title: \"SWE\", company: \"google\" },\n  { jobId: 2, title: \"SWE\", company: \"facebook\" },\n  { jobId: 3, title: \"SWE\", company: \"apple\" },\n  { jobId: 1, title: \"SWE\", company: \"google\" },\n  { jobId: 2, title: \"SWE\", company: \"facebook\" },\n  { jobId: 3, title: \"SWE\", company: \"apple\" },\n  { jobId: 1, title: \"SWE\", company: \"google\" },\n  { jobId: 2, title: \"SWE\", company: \"facebook\" },\n  { jobId: 3, title: \"SWE\", company: \"apple\" },\n  { jobId: 1, title: \"SWE\", company: \"google\" },\n  { jobId: 2, title: \"SWE\", company: \"facebook\" },\n  { jobId: 3, title: \"SWE\", company: \"apple\" },\n  { jobId: 1, title: \"SWE\", company: \"google\" },\n  { jobId: 2, title: \"SWE\", company: \"facebook\" },\n  { jobId: 3, title: \"SWE\", company: \"apple\" },\n  { jobId: 1, title: \"SWE\", company: \"google\" },\n  { jobId: 2, title: \"SWE\", company: \"facebook\" },\n  { jobId: 3, title: \"SWE\", company: \"apple\" },\n  { jobId: 1, title: \"SWE\", company: \"google\" },\n  { jobId: 2, title: \"SWE\", company: \"facebook\" },\n  { jobId: 3, title: \"SWE\", company: \"apple\" },\n  { jobId: 1, title: \"SWE\", company: \"google\" },\n  { jobId: 2, title: \"SWE\", company: \"facebook\" },\n  { jobId: 3, title: \"SWE\", company: \"apple\" },\n  { jobId: 1, title: \"SWE\", company: \"google\" },\n  { jobId: 2, title: \"SWE\", company: \"facebook\" },\n  { jobId: 3, title: \"SWE\", company: \"apple\" },\n];\n\nfunction handleClick(event) {\n  event.preventDefault();\n  console.info(\"You clicked a breadcrumb.\");\n}\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Breadcrumbs aria-label=\"breadcrumb\" className=\"Client-Breadcrumb\">\n        <Link color=\"inherit\" href=\"/\" onClick={handleClick}>\n          Material-UI\n        </Link>\n        <Link\n          color=\"inherit\"\n          href=\"/getting-started/installation/\"\n          onClick={handleClick}\n        >\n          Core\n        </Link>\n        <Typography color=\"textPrimary\">Breadcrumb</Typography>\n      </Breadcrumbs>\n      <Jobs jobs={mockJob} />\n      <form noValidate autoComplete=\"off\">\n        <TextField id=\"standard-basic\" label=\"Standard\" />\n        <TextField id=\"filled-basic\" label=\"Filled\" variant=\"filled\" />\n        <TextField id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\" />\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}